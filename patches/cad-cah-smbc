Bottom: c81fcb265432ca5826a4e3431824c3c9c5b5486a
Top:    36c92f029ce2ba3dd686ce34c5250088ca5527e8
Author: scott snyder <sss@karma>
Date:   2020-04-05 00:05:51 -0400

Changes to get ctrl-alt-del, cyanide&happiness, and SMBC working again.

---

diff --git a/ComicReader/src/com/blogspot/applications4android/comicreader/comics/CtrlAltDel.java b/ComicReader/src/com/blogspot/applications4android/comicreader/comics/CtrlAltDel.java
index 2577163..524b305 100755
--- a/ComicReader/src/com/blogspot/applications4android/comicreader/comics/CtrlAltDel.java
+++ b/ComicReader/src/com/blogspot/applications4android/comicreader/comics/CtrlAltDel.java
@@ -3,136 +3,343 @@ package com.blogspot.applications4android.comicreader.comics;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Calendar;
+import java.util.Iterator;
+import java.util.Collections;
+import java.util.SortedMap;
+import java.util.TreeMap;
+import java.util.NoSuchElementException;
 
-import com.blogspot.applications4android.comicreader.comictypes.ArchivedComic;
+import org.json.JSONObject;
+import org.json.JSONArray;
+import org.json.JSONException;
+
+import com.blogspot.applications4android.comicreader.comictypes.DailyComic;
 import com.blogspot.applications4android.comicreader.core.Bound;
 import com.blogspot.applications4android.comicreader.core.Downloader;
 import com.blogspot.applications4android.comicreader.core.Strip;
 
+import android.util.Log;
 
+class CADStrip {
+  public String mUrl;
+  public String mTitle;
+  public String mDate;
+  public Calendar mCal;
 
-public class CtrlAltDel extends ArchivedComic {
-	private static final int mFirstYr = 2002;
-	private int mCurrYr;
-	private static final String mArchiveStr = "http://www.cad-comic.com/cad/archive/";
+  public CADStrip (String url, String title, String date, Calendar cal)
+  {
+    mUrl = url;
+    mTitle = title;
+    mDate = date;
+    mCal = cal;
+  }
+};
 
+public class CtrlAltDel extends DailyComic {
+        protected SortedMap<String, TreeMap<Integer, CADStrip> > mMonths;
+        protected Calendar mRefreshTime;
 
-	@Override
-	public String getComicWebPageUrl() {
-		return "http://www.cad-comic.com/cad/";
+  	/**
+	 * Constructor
+	 */
+	public CtrlAltDel() {
+          super();
+          mMonths = new TreeMap<String, TreeMap<Integer, CADStrip> >();
 	}
 
-	@Override
-	protected String[] getAllComicUrls(BufferedReader reader) throws IOException {
-		ArrayList<String> m_com = new ArrayList<String>(); 
-		String str, str_temp;
-		String search = "/cad/" + mCurrYr;
-		int i;
-		while((str = reader.readLine()) != null) {
-			i = str.indexOf(search);
-			if (i != -1) {
-				str_temp = str;
-				str_temp=str_temp.replaceAll(".*?href=\"","");;
-				str_temp=str_temp.replaceAll("\".*$", "");
-				str_temp="http://www.cad-comic.com"+str_temp;
-				m_com.add(str_temp);
-			}
-		}
-		String[] m_com_urls = new String[m_com.size()];
-		m_com.toArray(m_com_urls);
-		return m_com_urls;
-	}
 
-	@Override
-	protected void fetchAllComicUrls() {
-		if(mComicUrls == null) {
-			try {
-				ArrayList<String> all_yrs = new ArrayList<String>();
-				// get for all years
-				Calendar cal = Calendar.getInstance();
-				int f = cal.get(Calendar.YEAR);
-				for(mCurrYr=mFirstYr;mCurrYr<=f;mCurrYr++) {
-					URI u = null;
-					try {
-						u = new URI(mArchiveStr+mCurrYr);
-					}
-					catch(Exception e) {} // This should never occur!!
-					BufferedReader reader = Downloader.openConnection(u);
-					String[] urls = getAllComicUrls(reader);
-					for(int i=urls.length-1;i>=0;i--) {
-						all_yrs.add(urls[i]);
-					}
-					reader.close();
-				}
-				mComicUrls = new String[all_yrs.size()];
-				all_yrs.toArray(mComicUrls);
-			}
-			catch(Exception e) {
-				e.printStackTrace();
-				return;
-			}
-		}
-		mBound = new Bound(0, (long) (mComicUrls.length - 1));
+        @Override
+	public String getComicWebPageUrl() {
+		return "https://www.cad-comic.com/cad/";
 	}
 
-	@Override
-	protected String getLatestStripUrl() {
-		fetchAllComicUrls();
-		return getStripUrlFromId(mComicUrls.length - 1);
-	}
+        protected Calendar getFirstCalendar()
+        {
+          getMonths();
+          String month = mMonths.firstKey();
+          if (month == null) return null;
+          SortedMap<Integer, CADStrip> dlist = getUrlsForMonth (month);
+          int d = dlist.firstKey();
+          int y = Integer.parseInt (month.substring (0, 4));
+          int m = Integer.parseInt (month.substring (4, 6));
+          Calendar c = Calendar.getInstance();
+          c.set (y, m-1, d);
+          return c;
+        }
+
+
+        protected Calendar getLatestCalendar()
+        {
+          getMonths();
+          String month = mMonths.lastKey();
+          if (month == null) return null;
+          SortedMap<Integer, CADStrip> dlist = getUrlsForMonth (month);
+          int d = dlist.lastKey();
+          int y = Integer.parseInt (month.substring (0, 4));
+          int m = Integer.parseInt (month.substring (4, 6));
+          Calendar c = Calendar.getInstance();
+          c.set (y, m-1, d);
+          return c;
+        }
+
+  
+        protected Calendar getTimeFromUrl(String url)
+        {
+          int i = url.lastIndexOf ("ENG_");
+          if (i >= 0) {
+            i += 4;
+          }
+          else {
+            i = url.lastIndexOf ("sillies-");
+            if (i >= 0) {
+              i += 8;
+            }
+            else {
+              i = url.lastIndexOf ("LITE_");
+              if (i >= 0) {
+                i += 5;
+              }
+              else {
+                i = url.lastIndexOf ("Strip");
+                if (i >= 0) {
+                  i += 5;
+                }
+                else {
+                  return null;
+                }
+              }
+            }
+          }
+          int y = Integer.parseInt (url.substring (i,   i+4));
+          int m = Integer.parseInt (url.substring (i+4, i+6));
+          int d = Integer.parseInt (url.substring (i+6, i+8));
+          Calendar c = Calendar.getInstance();
+          c.set (y, m-1, d);
+          return c;
+        }
+
+
+        private Calendar guessTimeFromUrl(String url)
+        {
+           // https://..../ENG_201811121.png
+           int i = url.lastIndexOf ("ENG_");
+           if (i >= 0) {
+             i += 4;
+           }
+           else {
+             i = url.lastIndexOf ("sillies-");
+             if (i >= 0) {
+               i += 8;
+             }
+             else {
+               i = url.lastIndexOf ("cad-");
+               if (i >= 0) {
+                 i += 4;
+               }
+               else {
+                 return null;
+               }
+             }
+           }
+           int y = Integer.parseInt (url.substring (i,   i+4));
+           int m = Integer.parseInt (url.substring (i+4, i+6));
+           int d = Integer.parseInt (url.substring (i+6, i+8));
+           Calendar c = Calendar.getInstance();
+           c.set (y, m-1, d);
+           return c;
+        }
+
+
+        private String monthKey(Calendar cal)
+        {
+          int y = cal.get (Calendar.YEAR);
+          int m = cal.get (Calendar.MONTH)+1;
+          return String.format ("%04d%02d", y, m);
+        }
 
-	@Override
-	protected String getArchiveUrl() {
-		return "http://www.cad-comic.com/cad/archive/";
-	}
+
+        public String getUrlFromTime(Calendar cal)
+        {
+          CADStrip strip = getStripFromTime (cal);
+          if (strip == null) return null;
+          return strip.mUrl;
+        }
 
 	@Override
 	protected boolean htmlNeeded() {
-		return true;
+		return false;
 	}
 
 	@Override
-    protected String parse(String url, BufferedReader reader, Strip strip)
-			throws IOException {
-		boolean comic_found = true;
-		String str;
-		String final_str = null;
-		String final_title = null;
-		while ((str = reader.readLine()) != null) {
-			if(str.indexOf("Comic could not be found.") != -1) {
-				comic_found = false;
-			}
-			if(!comic_found) {
-				continue;
-			}
-			int index1 = str.indexOf("/comics/cad-");
-			if (index1 != -1) {
-				final_str = str;
-				final_title = str;
-			}
-		}
-		/*
-		if(!comic_found) {
-			String msg = "Failed to find the comic for URL="+strip.uid();
-			ComicNotFoundException cnf = new ComicNotFoundException(msg);
-			throw cnf;
-		}
-		if((final_str == null) || (final_title == null)) {
-			String msg = "Failed to find the stripURL for URL="+strip.m_comic_url.toExternalForm();
-			msg += " final_str="+final_str+" final_title="+final_title;
-			ComicParseException cpe = new ComicParseException(msg);
-			throw cpe;
-		}
-		*/
-		final_str = final_str.replaceAll(".*src=\"","");
-		final_str = final_str.replaceAll("\".*","");
-		final_title = final_title.replaceAll(".*title=\"","");
-		final_title = final_title.replaceAll("\".*","");
-		strip.setTitle("Ctrl Alt Del - "+final_title);
-		strip.setText("-NA-");
-		return final_str;
+	public void clearCache() {
+          mMonths.clear();
+          super.clearCache();
 	}
 
+	/**
+	 * For those days which do not have a comic strip
+	 * If the given daily comic series WAS irregular previously but now has been
+	 * regular, then you have to override this function!
+	 * @param in the calendar which needs to take care of this
+	 * @param increment which date needs to be shown instead.
+	 */
+	public void addException(Calendar in, int increment)
+        {
+          if (getUrlFromTime (in) != null) return;
+
+          int d = in.get (Calendar.DAY_OF_MONTH);
+          String month = monthKey (in);
+          SortedMap<Integer, CADStrip> l = getUrlsForMonth (month);
+          if (l == null) return;
+
+          if (increment > 0) {
+            SortedMap<Integer, CADStrip> tail = l.tailMap (d);
+            try {
+              d = tail.firstKey();
+              in.set (Calendar.DAY_OF_MONTH, d);
+              return;
+            }
+            catch (NoSuchElementException e) {
+            }
+
+            in.add (Calendar.MONTH, 1);
+            month = monthKey (in);
+            l = getUrlsForMonth (month);
+            if (l == null) return;
+            try {
+              d = l.firstKey();
+              in.set (Calendar.DAY_OF_MONTH, d);
+              return;
+            }
+            catch (NoSuchElementException e) {
+            }
+          }
+          else { // increment < 0
+            SortedMap<Integer, CADStrip> tail = l.headMap (d);
+            try {
+              d = tail.lastKey();
+              in.set (Calendar.DAY_OF_MONTH, d);
+              return;
+            }
+            catch (NoSuchElementException e) {
+            }
+
+            in.add (Calendar.MONTH, -1);
+            month = monthKey (in);
+            l = getUrlsForMonth (month);
+            if (l == null) return;
+            try {
+              d = l.lastKey();
+              in.set (Calendar.DAY_OF_MONTH, d);
+              return;
+            }
+            catch (NoSuchElementException e) {
+            }
+          }
+	}
+
+
+        public CADStrip getStripFromTime(Calendar cal)
+        {
+          while (true) {
+            int d = cal.get (Calendar.DAY_OF_MONTH);
+            String month = monthKey (cal);
+            getMonths();
+            SortedMap<Integer, CADStrip> l = getUrlsForMonth (month);
+            if (l == null) {
+              return null;
+            }
+            CADStrip strip = l.get (d);
+            if (strip != null) {
+              return strip;
+            }
+            return null;
+          }
+        }
+
+        protected CADStrip getCADStripFromUrl(String url)
+        {
+          Calendar c = getTimeFromUrl (url);
+          return getStripFromTime (c);
+        }
+
+
+	protected String parse(String url, BufferedReader reader, Strip strip) throws IOException
+        {
+          CADStrip s = getCADStripFromUrl (url);
+          strip.setTitle ("CtrlAltDel for " + s.mDate + ": " + s.mTitle);
+          return url;
+        }
+
+        ///////
+
+        // List of dates in the form YYYYMM.
+        protected SortedMap<String, TreeMap<Integer, CADStrip> > getMonths() {
+          Calendar c = Calendar.getInstance();
+          if (c.after (mRefreshTime)) {
+            mMonths.clear();
+          }
+
+          if (mMonths.size() > 0) return mMonths;
+          try {
+            URI uri = new URI("https://cad-comic.com/wp-admin/admin-ajax.php");
+            String data = "action=get_cat_dates&cat_id=all";
+            String sdata = Downloader.downloadToString(uri, data);
+            JSONObject root = new JSONObject(sdata);
+            JSONArray months = root.getJSONArray("months");
+            for (int i = 0; i < months.length(); i++) {
+              JSONObject o = months.getJSONObject(i);
+              mMonths.put (o.getString("post_date"), null);
+            }
+          }
+          catch (Exception e) {
+            e.printStackTrace();
+          }
+
+          mRefreshTime = Calendar.getInstance();
+          mRefreshTime.add (Calendar.HOUR, 1);
+
+          return mMonths;
+        }
+
+        protected SortedMap<Integer, CADStrip> getUrlsForMonth (String month)
+        {
+            getMonths();
+            TreeMap<Integer, CADStrip> l = mMonths.get (month);
+            try {
+              if (l == null) {
+                if (mMonths.containsKey (month)) {
+                  l = new TreeMap<Integer, CADStrip>();
+                  URI uri = new URI("https://cad-comic.com/wp-admin/admin-ajax.php");
+                  String data = "action=custom_cat_search&post_cat=all&post_month="+month;
+                  String sdata = Downloader.downloadToString(uri, data);
+                  JSONObject root = new JSONObject(sdata);
+                  JSONArray posts = root.getJSONArray("posts");
+                  List<String> ret = new ArrayList<String>();
+                  for (int i = 0; i < posts.length(); i++) {
+                    JSONObject o = posts.getJSONObject(i);
+                    String url = o.getString("comic");
+                    if (url.lastIndexOf("KDM") >= 0) continue;
+                    Calendar c = getTimeFromUrl (url);
+                    if (!month.equals (monthKey (c))) {
+                      continue;
+                    }
+                    int dom = c.get (Calendar.DAY_OF_MONTH);
+                    CADStrip strip = new CADStrip (url, o.getString("title"), o.getString("date"), c);
+                    l.put (dom, strip);
+                  }
+                  mMonths.put (month, l);
+                }
+              }
+            }
+            catch (Exception e)
+            {
+              e.printStackTrace();
+            }
+            return l;
+        }
 }
diff --git a/ComicReader/src/com/blogspot/applications4android/comicreader/comics/Cyanide.java b/ComicReader/src/com/blogspot/applications4android/comicreader/comics/Cyanide.java
index 1a07cdb..c93fd75 100755
--- a/ComicReader/src/com/blogspot/applications4android/comicreader/comics/Cyanide.java
+++ b/ComicReader/src/com/blogspot/applications4android/comicreader/comics/Cyanide.java
@@ -9,6 +9,8 @@ import com.blogspot.applications4android.comicreader.comictypes.RandomIndexedCom
 import com.blogspot.applications4android.comicreader.core.Strip;
 import com.blogspot.applications4android.comicreader.exceptions.ComicLatestException;
 
+import android.util.Log;
+
 public class Cyanide extends RandomIndexedComic {
 
 	private static final String Cyanide = "Cyanide";
@@ -30,7 +32,7 @@ public class Cyanide extends RandomIndexedComic {
 			String str;
 			String final_next = null;
 			while ((str = br.readLine()) != null) {
-				if(str.indexOf("/\" class=\"next-comic\"") != -1) {
+				if(str.indexOf("/\" class=\"nav-next\"") != -1) {
 					final_next = str;
 				}
 			}
@@ -50,7 +52,7 @@ public class Cyanide extends RandomIndexedComic {
 			String str;
 			String final_prev = null;
 			while ((str = br.readLine()) != null) {
-				if(str.indexOf("/\" class=\"previous-comic\"") != -1) {
+				if(str.indexOf("/\" class=\"nav-previous\"") != -1) {
 					final_prev = str;
 				}
 			}
@@ -79,7 +81,7 @@ public class Cyanide extends RandomIndexedComic {
 			throw e;
 		}
 		final_str = final_str.replaceAll(".*comics%2F","");
-		final_str = final_str.replaceAll("%2F.*","");
+		final_str = final_str.replaceAll("\".*","");
 		Log.d(Cyanide, "In parseForLatestId, final_str = "+final_str);
 		return Integer.parseInt(final_str);
 	}
@@ -133,10 +135,10 @@ public class Cyanide extends RandomIndexedComic {
 			if(str.indexOf("\"og:url\"") != -1) {
 				final_title = str;
 			}
-			if(str.indexOf("/\" class=\"next-comic") != -1) {
+			if(str.indexOf("/\" class=\"nav-next") != -1) {
 				final_next = str;
 			}
-			if(str.indexOf("/\" class=\"previous-comic") != -1) {
+			if(str.indexOf("/\" class=\"nav-previous") != -1) {
 				final_prev = str;
 			}
 		}
diff --git a/ComicReader/src/com/blogspot/applications4android/comicreader/comics/SMBC.java b/ComicReader/src/com/blogspot/applications4android/comicreader/comics/SMBC.java
index be31ea7..0e855a7 100644
--- a/ComicReader/src/com/blogspot/applications4android/comicreader/comics/SMBC.java
+++ b/ComicReader/src/com/blogspot/applications4android/comicreader/comics/SMBC.java
@@ -7,11 +7,14 @@ import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.HashMap;
-//import android.util.Log;
+import java.net.URI;
+import java.net.URISyntaxException;
+import android.util.Log;
 
 import com.blogspot.applications4android.comicreader.comictypes.IndexedComic;
 import com.blogspot.applications4android.comicreader.core.Strip;
 import com.blogspot.applications4android.comicreader.exceptions.ComicLatestException;
+import com.blogspot.applications4android.comicreader.core.Downloader;
 
 
 public class SMBC extends IndexedComic {
@@ -33,38 +36,70 @@ public class SMBC extends IndexedComic {
 
 	@Override
 	protected String getFrontPageUrl() {
-		return "http://www.smbc-comics.com/";
+		return "https://www.smbc-comics.com/";
 	}
 
 	@Override
 	public String getComicWebPageUrl() {
-		return "http://www.smbc-comics.com/";
+		return "https://www.smbc-comics.com/";
 	}
 
+        // Latest ID is no longer in the html.
+        // Do a binary search to try to find it.
 	@Override
 	protected int parseForLatestId(BufferedReader reader) throws IOException, ComicLatestException {
-		String str;
-		String final_str = null;
-		while((str = reader.readLine()) != null) {
-			int index1 = str.indexOf("buythisimg");
-			if (index1 != -1) {
-				final_str = str;
-				break;
-			}
-		}
-//Log.d("SMBC", "final_string " + final_str);
-		if(final_str == null) {
-			String msg = "Failed to get the latest id for "+this.getClass().getSimpleName();
-			ComicLatestException e = new ComicLatestException(msg);
-			throw e;
-		}
-		final_str = final_str.replaceAll(".*id%3D","");
-//Log.d("SMBC", "final_str " + final_str);
-		final_str = final_str.replaceAll("\".*","");
-//Log.d("SMBC", "final_str " + final_str);
-		return Integer.parseInt(final_str);
+          String permalink = getPermalinkFromReader (reader);
+          int lo = 5000;
+          int hi = 5500;
+          String lhi = getPermalinkForId(hi);
+
+          while (!lhi.equals (permalink)) {
+            hi = (hi-lo)*2 + lo;
+            lhi = getPermalinkForId(hi);
+          }
+
+          while (true) {
+            int mid = (lo+hi)/2;
+            String lmid = getPermalinkForId(mid);
+            if (lmid.equals (permalink)) {
+              hi = mid;
+            }
+            else {
+              lo = mid;
+            }
+            if ((hi-lo)<=1) return hi;
+          }
 	}
 
+        private String getPermalinkFromReader (BufferedReader reader) throws IOException
+        {
+          String str;
+          String final_str = null;
+          while((str = reader.readLine()) != null) {
+            int index1 = str.indexOf("permalinktext");
+            if (index1 >= 0) {
+              str = str.replaceAll(".*text\" value=\"","");
+              str = str.replaceAll("\".*","");
+              return str;
+            }
+          }
+          return "";
+        }
+
+
+        private String getPermalinkForId (int id)
+        {
+          try {
+            String url = getStripUrlFromId (id);
+            BufferedReader reader = Downloader.openConnection (new URI (url));
+            return getPermalinkFromReader (reader);
+          }
+          catch (Exception e) {
+            e.printStackTrace();
+            return "";
+          }
+        }
+
 	@Override
 	public int addException(int id, int increment) {
 		while(true) {
@@ -78,7 +113,7 @@ public class SMBC extends IndexedComic {
 
 	@Override
 	public String getStripUrlFromId(int num) {
-		return "http://www.smbc-comics.com/?id=" + num;
+		return "https://www.smbc-comics.com/?id=" + num;
 	}
 
 	@Override
@@ -119,7 +154,7 @@ public class SMBC extends IndexedComic {
 		image_url = image_url.replaceAll("\\(","%28");
 		image_url = image_url.replaceAll("\\)","%29");
 		if ( image_url.indexOf("http") == -1 ) {
-			image_url=image_url.replaceAll("^","http://www.smbc-comics.com/");
+			image_url=image_url.replaceAll("^","https://www.smbc-comics.com/");
 		}
 //Log.d("SMBC", "image_url " + image_url);
 		final_title = final_str.replaceAll(".*title=\"","");
diff --git a/ComicReader/src/com/blogspot/applications4android/comicreader/comictypes/DailyGoComicsCalendar.java b/ComicReader/src/com/blogspot/applications4android/comicreader/comictypes/DailyGoComicsCalendar.java
index 6528b0e..03e033e 100755
--- a/ComicReader/src/com/blogspot/applications4android/comicreader/comictypes/DailyGoComicsCalendar.java
+++ b/ComicReader/src/com/blogspot/applications4android/comicreader/comictypes/DailyGoComicsCalendar.java
@@ -158,6 +158,7 @@ public class DailyGoComicsCalendar {
 	 * @param increment whether to increment or decrement
 	 */
 	public void findValidDays(int year, int mon, int increment) {
+          Log.d("DGCC", "findValidDays");
 		int[] arr = null;
 		// out of bounds?
 		if(mon <= 0) {
@@ -171,6 +172,8 @@ public class DailyGoComicsCalendar {
 		while(true) {
 			arr = getValidDays(year, mon);
 			if(arr != null) {
+                                Log.d("DGCC", "set mValidDays");
+                                Log.d("DGCC", ""+arr.length);
 				mValidDays = arr;
 				mCurrMon = mon;
 				mCurrYr = year;
@@ -206,8 +209,11 @@ public class DailyGoComicsCalendar {
 	 * @return the array of valid days for this month
 	 */
 	private int[] getValidDays(int year, int month) {
+          Log.d("DGCC", "getValidDays");
 		try {
+                  Log.d("DGCC", "about to download");
 			String str = Downloader.downloadToString(new URI(mGcc.getCalendarJsUrl(year, month)));
+			Log.d("DGCC", "downloaded");
 			Log.d("DGCC", str);
 			// no result :(
 			if((str == null) || (str.length() <= 1)) {
@@ -231,6 +237,7 @@ public class DailyGoComicsCalendar {
 			return day_i; // days;
 		}
 		catch(Exception e) {
+                  Log.d("DGCC", "exception");
 			e.printStackTrace();
 			return null;
 		}
diff --git a/ComicReader/src/com/blogspot/applications4android/comicreader/comictypes/DailyGoComicsCom.java b/ComicReader/src/com/blogspot/applications4android/comicreader/comictypes/DailyGoComicsCom.java
index 4a76ea9..d31eb00 100644
--- a/ComicReader/src/com/blogspot/applications4android/comicreader/comictypes/DailyGoComicsCom.java
+++ b/ComicReader/src/com/blogspot/applications4android/comicreader/comictypes/DailyGoComicsCom.java
@@ -5,7 +5,7 @@ import java.io.IOException;
 import java.util.Calendar;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-//import android.util.Log;
+import android.util.Log;
 
 import com.blogspot.applications4android.comicreader.core.Strip;
 
@@ -53,12 +53,12 @@ public class DailyGoComicsCom extends DailyComic {
 	 * @return string containing the json url
 	 */
 	public String getCalendarJsUrl(int year, int month) {
-		return ("http://www.gocomics.com/calendar/"+mComicName+"/"+year+"/"+month);
+		return ("https://www.gocomics.com/calendar/"+mComicName+"/"+year+"/"+month);
 	}
 
 	@Override
 	public String getComicWebPageUrl() {
-		return ("http://www.gocomics.com/" + mComicName);
+		return ("https://www.gocomics.com/" + mComicName);
 	}
 
 	@Override
@@ -157,6 +157,7 @@ public class DailyGoComicsCom extends DailyComic {
             }
         }
 //Log.d("GO_Comics", "final_string " + final_str);
+        Log.d("DGCC", "final_string " + final_str);
     	final_str = final_str.replaceAll(".*=\"","");
         final_str = final_str.replaceAll("\"/*","");
 
@@ -185,7 +186,7 @@ public class DailyGoComicsCom extends DailyComic {
 	 * @return the format string
 	 */
 	private String _getUrlFormat() {
-		return ("http://www.gocomics.com/" + mComicName + "/%4d/%02d/%02d/");
+		return ("https://www.gocomics.com/" + mComicName + "/%4d/%02d/%02d/");
 	}
 
 	/**
diff --git a/ComicReader/src/com/blogspot/applications4android/comicreader/core/Comic.java b/ComicReader/src/com/blogspot/applications4android/comicreader/core/Comic.java
index b4ee56f..a7f4155 100755
--- a/ComicReader/src/com/blogspot/applications4android/comicreader/core/Comic.java
+++ b/ComicReader/src/com/blogspot/applications4android/comicreader/core/Comic.java
@@ -550,14 +550,20 @@ public abstract class Comic extends ComicParser {
 	 * @return next strip
 	 */
 	public Strip getNextStrip() {
+          Log.d("zzz", "getNextStrip1");
 		if (isCurrentLatestStrip()) {
 			return mCurrent;
 		}
+          Log.d("zzz", "getNextStrip2");
 		if (!mCurrent.hasNext()) {
+                  Log.d("zzz", "getNextStrip3");
 			mCurrent.setNext(getNextStripUrl());
 		}
 		String uid = mCurrent.uid();
-		Strip s = _querySetCurrentUid(mCurrent.getNext());
+                Log.d("zzz", "getNextStrip4 " + uid);
+                String next = mCurrent.getNext();
+                Log.d("zzz", "getNextStrip5 " + next);
+		Strip s = _querySetCurrentUid(next);
 		s.setPrevious(uid);
 		return s;
 	}
diff --git a/ComicReader/src/com/blogspot/applications4android/comicreader/core/Downloader.java b/ComicReader/src/com/blogspot/applications4android/comicreader/core/Downloader.java
index d4003c5..eddf1cf 100755
--- a/ComicReader/src/com/blogspot/applications4android/comicreader/core/Downloader.java
+++ b/ComicReader/src/com/blogspot/applications4android/comicreader/core/Downloader.java
@@ -13,15 +13,20 @@ import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.DefaultHttpClient;
 
 import com.blogspot.applications4android.comicreader.exceptions.ComicSDCardFull;
 
 import java.net.URL;
 import java.net.URLConnection;
+import java.net.HttpURLConnection;
 import javax.net.ssl.HttpsURLConnection;
 
+import android.util.Log;
 
 /**
  * Class containing utility functions for downloading the URI's
@@ -50,14 +55,35 @@ public class Downloader {
 	 * @throws ClientProtocolException 
 	 */
 	public static String downloadToString(URI uri) throws ClientProtocolException, URISyntaxException, IOException {
-		BufferedReader br = openConnection(uri);
+            return downloadToString(uri, "");
+	}
+
+	/**
+	 * Helper function to download a URI from the given url and save it to a string.
+	 * Uses URLConnection in order to set up a connection with the server and download
+	 * the URI requested.
+	 * @param uri The url of interest.
+         * @parma data Data to POST, or empty for a GET.
+	 * @return the contents of the url in a string
+	 * @throws IOException 
+	 * @throws URISyntaxException 
+	 * @throws ClientProtocolException 
+	 */
+         public static String downloadToString(URI uri, String data) throws ClientProtocolException, URISyntaxException, IOException {
+           Log.d("Downloader", "downloadToString " + uri.toString() + " " + data);
+                BufferedReader br = openConnection(uri, data);
+                Log.d("Downloader", "downloadToString opened");
 		StringBuilder sb = new StringBuilder(SB_CAPACITY);
 		char[] buff = new char[SB_CAPACITY];
 		int len;
+                Log.d("Downloader", "downloadToString reading");
 	    while((len = br.read(buff)) > 0) {
 	    	sb.append(buff, 0, len);
 	    }
+            Log.d("Downloader", "downloadToString read");
 	    br.close();
+            Log.d("Downloader", "downloadToString got "+ sb.toString());
+            Log.d("Downloader", "downloadToString returning");
 	    return sb.toString();
 	}
 
@@ -70,12 +96,45 @@ public class Downloader {
 	 * @throws ClientProtocolException 
 	 */
 	public static BufferedReader openConnection(URI uri) throws URISyntaxException, ClientProtocolException, IOException {
+                return openConnection(uri, "");
+	}
+
+	/**
+	 * Open a http connection with the given url
+	 * @param uri desired url
+         * @parma data Data to POST, or empty for a GET.
+	 * @return buffered reader for this url connection
+	 * @throws URISyntaxException 
+	 * @throws IOException 
+	 * @throws ClientProtocolException 
+	 */
+         public static BufferedReader openConnection(URI uri, String data) throws URISyntaxException, ClientProtocolException, IOException {
+           /*
 		HttpGet http = new HttpGet(uri);
 		HttpClient client = new DefaultHttpClient();
 		HttpResponse resp = (HttpResponse) client.execute(http);
 		HttpEntity entity = resp.getEntity();
 		InputStreamReader isr = new InputStreamReader(entity.getContent());
+           */
+           
+                Log.d("zzz-a", "start openConnection");
+                Log.d("zzz-a", uri.toString());
+                URL url = uri.toURL();
+                HttpURLConnection con = (HttpURLConnection)url.openConnection();
+                con.setInstanceFollowRedirects (true);
+                Log.d("zzz-b", "made con");
+                if (data.length() > 0) {
+                  con.setRequestMethod("POST");
+                  con.setDoOutput(true);
+                  con.getOutputStream().write(data.getBytes("UTF-8"));
+                }
+		InputStreamReader isr = new InputStreamReader(con.getInputStream());
+                Log.d("zzz-c", "made isr");
+                Log.d("zzz-e", con.getResponseMessage());
+                Log.d("zzz-e", con.getURL().toString());
+           
 		BufferedReader br = new BufferedReader(isr, DNLD_BUFF_SIZE);
+                Log.d("zzz-d", "openConnection returning");
 		return br;
 	}
